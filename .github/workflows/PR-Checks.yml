name: Check Format, Errors, and Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allows manual triggering

permissions:
  contents: write  # Needed for committing Black formatting
  actions: write   # Needed for triggering workflows

jobs:

  Format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.1'

      - name: Install Poetry
        run: pip install poetry

      - name: Configure Poetry to Use Virtualenv
        run: poetry config virtualenvs.in-project true

      - name: Install Dependencies
        run: poetry install

      - name: Run Black (check only)
        id: black_check
        continue-on-error: true  # Allow workflow to continue even if Black fails
        run: |
          source .venv/bin/activate
          black --check .  # Check if formatting is needed

      - name: Auto-format and push if needed
        if: steps.black_check.outcome == 'failure'
        run: |
          source .venv/bin/activate
          black .  # Auto-fix formatting
          git config --global user.name "My GitHub Username"  # Use your GitHub username
          git config --global user.email "myemail@example.com"  # Use your GitHub email
          git add .
          git commit -m "Auto-format with Black"
          
          # Push using the repo-scoped token instead of GITHUB_TOKEN
          git push https://x-access-token:${{ secrets.REPO_SCOPED_TOKEN }}@github.com/${{ github.repository }} HEAD:${{ github.event.pull_request.head.ref }}

      - name: Manually trigger workflow on new commit
        if: steps.black_check.outcome == 'failure'
        run: |
          gh api repos/${{ github.repository }}/actions/workflows/PR-Checks.yml/dispatches \
            -X POST \
            -F ref=${{ github.event.pull_request.head.ref }}
        env:
          GH_TOKEN: ${{ secrets.REPO_SCOPED_TOKEN }}


      - name: Stop execution to ensure tests run on the latest commit
        if: steps.black_check.outcome == 'failure'
        run: exit 1

  Errors:
    needs: Format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.1'

      - name: Install Poetry
        run: pip install poetry

      - name: Configure Poetry to Use Virtualenv
        run: poetry config virtualenvs.in-project true

      - name: Install Dependencies
        run: poetry install

      - name: Run Ruff
        run: |
          source .venv/bin/activate
          ruff check .

  Tests:
    needs: Format
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.1'

      - name: Install Poetry
        run: pip install poetry

      - name: Configure Poetry to Use Virtualenv
        run: poetry config virtualenvs.in-project true

      - name: Install Dependencies
        run: poetry install

      - name: Run tests with coverage
        run: |
          source .venv/bin/activate
          coverage run -m pytest -v -s

      - name: Generate Coverage Report  
        run: |
          source .venv/bin/activate
          coverage report -m
