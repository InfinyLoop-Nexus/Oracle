name: Check Format, Errors, and Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Manual trigger

permissions:
  contents: write  # Needed for committing Black formatting
  actions: write   # Allows triggering workflows

jobs:

  Format:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}  # Ensure PR branch is checked out
          token: ${{ secrets.GITHUB_TOKEN }}  # Ensure permissions for pushing

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.1'

      - name: Install Poetry
        run: pip install poetry

      - name: Configure Poetry to Use Virtualenv
        run: poetry config virtualenvs.in-project true

      - name: Install Dependencies
        run: poetry install

      - name: Run Black (check only)
        id: black_check
        continue-on-error: true  # Allow workflow to continue even if Black fails
        run: |
          source .venv/bin/activate
          black --check .  # Check if formatting is needed

      - name: Auto-format and push if needed
        if: steps.black_check.outcome == 'failure'  # Run only if Black detected issues
        run: |
          source .venv/bin/activate
          black .  # Auto-fix formatting
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add .
          git commit -m "Auto-format with Black"
          git push origin HEAD:${{ github.event.pull_request.head.ref }}  # Push to PR branch

      - name: Trigger new workflow run after formatting
        if: steps.black_check.outcome == 'failure'  # Only trigger if formatting was needed
        run: |
          gh api repos/${{ github.repository }}/actions/workflows/PR-Checks.yml/dispatches \
            -X POST \
            -F ref=${{ github.event.pull_request.head.ref }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Stop execution since new commit was pushed
        if: steps.black_check.outcome == 'failure'
        run: exit 1  # Stop the current workflow so it doesn't continue running on outdated code

  Errors:
    needs: Format  # Runs only if Format completes successfully
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.1'

      - name: Install Poetry
        run: pip install poetry

      - name: Configure Poetry to Use Virtualenv
        run: poetry config virtualenvs.in-project true

      - name: Install Dependencies
        run: poetry install

      - name: Run Ruff
        run: |
          source .venv/bin/activate
          ruff check .

  Tests:
    needs: Format  # Runs only if Format completes successfully
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.1'

      - name: Install Poetry
        run: pip install poetry

      - name: Configure Poetry to Use Virtualenv
        run: poetry config virtualenvs.in-project true

      - name: Install Dependencies
        run: poetry install

      - name: Run tests with coverage
        run: |
          source .venv/bin/activate
          coverage run -m pytest -v -s

      - name: Generate Coverage Report  
        run: |
          source .venv/bin/activate
          coverage report -m
