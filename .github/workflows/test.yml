name: Run Pytest on PRs

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

permissions:
    contents: write
    pull-requests: write

jobs:

    Format:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.head.ref }}

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: '3.13.1'

            - name: Install Poetry
              run: pip install poetry

            - name: Configure Poetry to Use Virtualenv
              run: poetry config virtualenvs.in-project true

            - name: Install Dependencies
              run: poetry install

            - name: Check Black formatting
              id: black
              run: |
                  source .venv/bin/activate
                  black --check . 2>&1 | tee black_output.txt || echo "failed" >> $GITHUB_ENV
              continue-on-error: true

            - name: Upload Black Output
              if: failure()
              uses: actions/upload-artifact@v4
              with:
                  name: black_output
                  path: black_output.txt

    Errors:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.head.ref }}

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: '3.13.1'

            - name: Install Poetry
              run: pip install poetry

            - name: Configure Poetry to Use Virtualenv
              run: poetry config virtualenvs.in-project true

            - name: Install Dependencies
              run: poetry install

            - name: Run Ruff
              id: ruff
              run: |
                  source .venv/bin/activate
                  ruff check . 2>&1 | tee ruff_output.txt || echo "failed" >> $GITHUB_ENV
              continue-on-error: true

            - name: Upload Ruff Output
              if: failure()
              uses: actions/upload-artifact@v4
              with:
                  name: ruff_output
                  path: ruff_output.txt

    Tests:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  ref: ${{ github.event.pull_request.head.ref }}

            - name: Set up Python
              uses: actions/setup-python@v5
              with:
                  python-version: '3.13.1'

            - name: Install Poetry
              run: pip install poetry

            - name: Configure Poetry to Use Virtualenv
              run: poetry config virtualenvs.in-project true

            - name: Install Dependencies
              run: poetry install

            - name: Run tests with coverage
              id: pytest
              run: |
                  source .venv/bin/activate
                  coverage run -m pytest -v -s 2>&1 | tee pytest_output.txt || echo "failed" >> $GITHUB_ENV
              continue-on-error: true

            - name: Generate Coverage Report  
              run: |
                  source .venv/bin/activate
                  coverage report -m 2>&1 | tee coverage_output.txt

            - name: Upload Pytest Output
              uses: actions/upload-artifact@v4
              with:
                  name: pytest_output
                  path: pytest_output.txt

            - name: Upload Coverage Report
              uses: actions/upload-artifact@v4
              with:
                  name: coverage_output
                  path: coverage_output.txt

    Summary:
        needs: [Format, Errors, Tests]
        runs-on: ubuntu-latest

        steps:
            - name: Download all outputs
              uses: actions/download-artifact@v4
              with:
                  path: artifacts

            - name: Create Summary Comment
              uses: actions/github-script@v6
              with:
                  script: |
                      const fs = require('fs');
                      const { github, context } = require('@actions/github');

                      let summary = "## CI Check Summary\n";

                      // Black Formatting Check
                      if (process.env.BLACK) {
                          const blackOutput = fs.existsSync('artifacts/black_output/black_output.txt') 
                              ? fs.readFileSync('artifacts/black_output/black_output.txt', 'utf8') 
                              : "Black failed, but no output available.";
                          summary += `### ‚ùå Black Formatting Failed\n\`\`\`\n${blackOutput}\n\`\`\`\n`;
                      } else {
                          summary += "- ‚úÖ **Black Formatting Passed**\n";
                      }

                      // Ruff Check
                      if (process.env.RUFF) {
                          const ruffOutput = fs.existsSync('artifacts/ruff_output/ruff_output.txt') 
                              ? fs.readFileSync('artifacts/ruff_output/ruff_output.txt', 'utf8') 
                              : "Ruff failed, but no output available.";
                          summary += `### ‚ùå Ruff Linting Failed\n\`\`\`\n${ruffOutput}\n\`\`\`\n`;
                      } else {
                          summary += "- ‚úÖ **Ruff Linting Passed**\n";
                      }

                      // Pytest
                      if (process.env.PYTEST) {
                          const pytestOutput = fs.existsSync('artifacts/pytest_output/pytest_output.txt') 
                              ? fs.readFileSync('artifacts/pytest_output/pytest_output.txt', 'utf8') 
                              : "Tests failed, but no output available.";
                          summary += `### ‚ùå Tests Failed\n\`\`\`\n${pytestOutput}\n\`\`\`\n`;
                      } else {
                          summary += "- ‚úÖ **Tests Passed**\n";
                      }

                      // Coverage
                      if (fs.existsSync('artifacts/coverage_output/coverage_output.txt')) {
                          const coverageOutput = fs.readFileSync('artifacts/coverage_output/coverage_output.txt', 'utf8');
                          summary += `### üìä Test Coverage Report\n\`\`\`\n${coverageOutput}\n\`\`\`\n`;
                      }

                      // Post the comment
                      github.rest.issues.createComment({
                          ...context.repo,
                          issue_number: context.issue.number,
                          body: summary
                      });
