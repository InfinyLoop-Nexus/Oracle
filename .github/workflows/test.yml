name: Run Pytest on PRs

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  Format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Setup Python and Poetry
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.1'

      - name: Install Poetry and Dependencies
        run: |
          pip install poetry
          poetry config virtualenvs.in-project true
          poetry install

      - name: Run Black Check
        run: |
          set -o pipefail
          source .venv/bin/activate
          if ! black --check . 2>&1 | tee black_output.txt; then
            echo "failed" > black_failed.txt
            exit 1
          fi

      - name: Upload Black Output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: black_output
          path: black_output.txt

      - name: Upload Black Marker
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: black_marker
          path: black_failed.txt

  Errors:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Setup Python and Poetry
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.1'

      - name: Install Poetry and Dependencies
        run: |
          pip install poetry
          poetry config virtualenvs.in-project true
          poetry install

      - name: Run Ruff Check
        run: |
          set -o pipefail
          source .venv/bin/activate
          if ! ruff check . 2>&1 | tee ruff_output.txt; then
            echo "failed" > ruff_failed.txt
            exit 1
          fi

      - name: Upload Ruff Output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ruff_output
          path: ruff_output.txt

      - name: Upload Ruff Marker
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ruff_marker
          path: ruff_failed.txt

  Tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Setup Python and Poetry
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.1'

      - name: Install Poetry and Dependencies
        run: |
          pip install poetry
          poetry config virtualenvs.in-project true
          poetry install

      - name: Run Tests with Coverage
        run: |
          set -o pipefail
          source .venv/bin/activate
          if ! coverage run -m pytest -v -s 2>&1 | tee pytest_output.txt; then
            echo "failed" > pytest_failed.txt
            exit 1
          fi

      - name: Generate Coverage Report
        run: |
          set -o pipefail
          source .venv/bin/activate
          coverage report -m 2>&1 | tee coverage_output.txt

      - name: Upload Pytest Output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest_output
          path: pytest_output.txt

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage_output
          path: coverage_output.txt

      - name: Upload Pytest Marker
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest_marker
          path: pytest_failed.txt

  Summary:
    if: always()
    needs: [Format, Errors, Tests]
    runs-on: ubuntu-latest
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create and Post Summary Comment
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            let summary = "## CI Check Summary\n";

            function readFile(path, fallback) {
              return fs.existsSync(path) ? fs.readFileSync(path, 'utf8') : fallback;
            }

            // Black Check
            const blackMarker = 'artifacts/black_marker/black_failed.txt';
            const blackOutputPath = 'artifacts/black_output/black_output.txt';
            const blackFailed = fs.existsSync(blackMarker);
            const blackOutput = readFile(blackOutputPath, "Black check passed.");
            summary += blackFailed 
              ? `### ‚ùå Black Formatting Failed\n\`\`\`\n${blackOutput}\n\`\`\`\n`
              : "- ‚úÖ Black Formatting Passed\n";

            // Ruff Check
            const ruffMarker = 'artifacts/ruff_marker/ruff_failed.txt';
            const ruffOutputPath = 'artifacts/ruff_output/ruff_output.txt';
            const ruffFailed = fs.existsSync(ruffMarker);
            const ruffOutput = readFile(ruffOutputPath, "Ruff check passed.");
            summary += ruffFailed 
              ? `### ‚ùå Ruff Linting Failed\n\`\`\`\n${ruffOutput}\n\`\`\`\n`
              : "- ‚úÖ Ruff Linting Passed\n";

            // Pytest Check
            const pytestMarker = 'artifacts/pytest_marker/pytest_failed.txt';
            const pytestOutputPath = 'artifacts/pytest_output/pytest_output.txt';
            const pytestFailed = fs.existsSync(pytestMarker);
            const pytestOutput = readFile(pytestOutputPath, "Tests passed.");
            summary += pytestFailed 
              ? `### ‚ùå Tests Failed\n\`\`\`\n${pytestOutput}\n\`\`\`\n`
              : "- ‚úÖ Tests Passed\n";

            // Coverage Report
            const coverageOutputPath = 'artifacts/coverage_output/coverage_output.txt';
            const coverageOutput = readFile(coverageOutputPath, "No coverage report available.");
            summary += `### üìä Coverage Report\n\`\`\`\n${coverageOutput}\n\`\`\`\n`;

            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: summary
            });
