name: Run Pytest on PRs

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:

  Format:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.1'

      - name: Install Poetry
        run: pip install poetry

      - name: Configure Poetry to Use Virtualenv
        run: poetry config virtualenvs.in-project true

      - name: Install Dependencies
        run: poetry install

      - name: Check Black formatting
        id: black
        run: |
          source .venv/bin/activate
          black --check . 2>&1 | tee black_output.txt || (echo "failed" > black_failed.txt && exit 1)

      - name: Upload Black Output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: black_output
          path: black_output.txt

  Errors:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.1'

      - name: Install Poetry
        run: pip install poetry

      - name: Configure Poetry to Use Virtualenv
        run: poetry config virtualenvs.in-project true

      - name: Install Dependencies
        run: poetry install

      - name: Run Ruff
        id: ruff
        run: |
          source .venv/bin/activate
          ruff check . 2>&1 | tee ruff_output.txt || (echo "failed" > ruff_failed.txt && exit 1)

      - name: Upload Ruff Output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ruff_output
          path: ruff_output.txt

  Tests:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.13.1'

      - name: Install Poetry
        run: pip install poetry

      - name: Configure Poetry to Use Virtualenv
        run: poetry config virtualenvs.in-project true

      - name: Install Dependencies
        run: poetry install

      - name: Run tests with coverage
        id: pytest
        run: |
          source .venv/bin/activate
          coverage run -m pytest -v -s 2>&1 | tee pytest_output.txt || (echo "failed" > pytest_failed.txt && exit 1)

      - name: Generate Coverage Report
        run: |
          source .venv/bin/activate
          coverage report -m 2>&1 | tee coverage_output.txt

      - name: Upload Pytest Output
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: pytest_output
          path: pytest_output.txt

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage_output
          path: coverage_output.txt

  Summary:
    needs: [Format, Errors, Tests]
    runs-on: ubuntu-latest
    steps:
      - name: Download all outputs
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Summary Comment
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');

            let summary = "## CI Check Summary\n";

            function readOutput(file, defaultMsg) {
                return fs.existsSync(file) ? fs.readFileSync(file, 'utf8') : defaultMsg;
            }

            // Black Formatting Check
            const blackFailed = fs.existsSync('artifacts/black_failed.txt');
            const blackOutput = readOutput('artifacts/black_output/black_output.txt', "Black formatting check passed.");
            summary += blackFailed ? `### ‚ùå Black Formatting Failed\n\`\`\`\n${blackOutput}\n\`\`\`\n` : "- ‚úÖ **Black Formatting Passed**\n";

            // Ruff Check
            const ruffFailed = fs.existsSync('artifacts/ruff_failed.txt');
            const ruffOutput = readOutput('artifacts/ruff_output/ruff_output.txt', "Ruff linting passed.");
            summary += ruffFailed ? `### ‚ùå Ruff Linting Failed\n\`\`\`\n${ruffOutput}\n\`\`\`\n` : "- ‚úÖ **Ruff Linting Passed**\n";

            // Pytest
            const pytestFailed = fs.existsSync('artifacts/pytest_failed.txt');
            const pytestOutput = readOutput('artifacts/pytest_output/pytest_output.txt', "All tests passed.");
            summary += pytestFailed ? `### ‚ùå Tests Failed\n\`\`\`\n${pytestOutput}\n\`\`\`\n` : "- ‚úÖ **All Tests Passed**\n";

            // Coverage
            const coverageOutput = readOutput('artifacts/coverage_output/coverage_output.txt', "No coverage report available.");
            summary += `### üìä Test Coverage Report\n\`\`\`\n${coverageOutput}\n\`\`\`\n`;

            // Post the comment
            github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
            });
